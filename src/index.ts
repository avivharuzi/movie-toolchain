import { app, BrowserWindow, ipcMain } from 'electron';

import {
  cropImageBase64,
  downloadSubtitle,
  getImageBlackBars,
  getMovieDetails,
  saveMoviePrepareFiles,
  selectDirectory,
} from './server';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = async (): Promise<void> => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
    },
  });

  ipcMain.handle('getMovieDetails', (event, imdbID: string) =>
    getMovieDetails(imdbID)
  );

  ipcMain.handle(
    'downloadSubtitle',
    (event, options: DownloadSubtitleOptions) => downloadSubtitle(options)
  );

  ipcMain.handle('selectDirectory', () => selectDirectory());

  ipcMain.handle(
    'saveMoviePrepareFiles',
    (event, options: SaveMoviePrepareFilesOptions) =>
      saveMoviePrepareFiles(options)
  );

  ipcMain.handle(
    'getImageBlackBars',
    (event, image: string, options?: Partial<ImageBlackBarsOptions>) =>
      getImageBlackBars(image, options)
  );

  ipcMain.handle('cropImageBase64', (event, options: CropImageBase64Options) =>
    cropImageBase64(options)
  );

  // and load the index.html of the app.
  await mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  if (!app.isPackaged) {
    // Open the DevTools.
    mainWindow.webContents.openDevTools();
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', async () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    await createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
